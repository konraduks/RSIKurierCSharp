//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace WebServices.konrad {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://www.w3.org/ns/ws-policy' was not handled.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CourierPortBinding", Namespace="http://server.webservices.konrad.com/")]
    public partial class CourierService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback registryOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDistrictsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServerNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUnclaimedParcelsOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkParcelStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback addEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback trackOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback getWayBillOperationCompleted;
        
        private System.Threading.SendOrPostCallback getClientByAPIpasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback placeOrderByLoginAndPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback placeOrderByAPIpasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback getClientByLoginAndPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCountriesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CourierService() {
            this.Url = global::WebServices.Properties.Settings.Default.WebServices_konrad_serverImplementationService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event registryCompletedEventHandler registryCompleted;
        
        /// <remarks/>
        public event getDistrictsCompletedEventHandler getDistrictsCompleted;
        
        /// <remarks/>
        public event getServerNameCompletedEventHandler getServerNameCompleted;
        
        /// <remarks/>
        public event getUnclaimedParcelsCompletedEventHandler getUnclaimedParcelsCompleted;
        
        /// <remarks/>
        public event checkParcelStatusCompletedEventHandler checkParcelStatusCompleted;
        
        /// <remarks/>
        public event checkLoginCompletedEventHandler checkLoginCompleted;
        
        /// <remarks/>
        public event addEmployeeCompletedEventHandler addEmployeeCompleted;
        
        /// <remarks/>
        public event trackOrderCompletedEventHandler trackOrderCompleted;
        
        /// <remarks/>
        public event getWayBillCompletedEventHandler getWayBillCompleted;
        
        /// <remarks/>
        public event getClientByAPIpasswordCompletedEventHandler getClientByAPIpasswordCompleted;
        
        /// <remarks/>
        public event placeOrderByLoginAndPasswordCompletedEventHandler placeOrderByLoginAndPasswordCompleted;
        
        /// <remarks/>
        public event placeOrderByAPIpasswordCompletedEventHandler placeOrderByAPIpasswordCompleted;
        
        /// <remarks/>
        public event getClientByLoginAndPasswordCompletedEventHandler getClientByLoginAndPasswordCompleted;
        
        /// <remarks/>
        public event getCountriesCompletedEventHandler getCountriesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://server.webservices.konrad.com/", ResponseNamespace="http://server.webservices.konrad.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool registry([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg3, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg4, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg5, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg6, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg7, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg8, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg9) {
            object[] results = this.Invoke("registry", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3,
                        arg4,
                        arg5,
                        arg6,
                        arg7,
                        arg8,
                        arg9});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void registryAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, string arg8, string arg9) {
            this.registryAsync(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, null);
        }
        
        /// <remarks/>
        public void registryAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, string arg8, string arg9, object userState) {
            if ((this.registryOperationCompleted == null)) {
                this.registryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregistryOperationCompleted);
            }
            this.InvokeAsync("registry", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3,
                        arg4,
                        arg5,
                        arg6,
                        arg7,
                        arg8,
                        arg9}, this.registryOperationCompleted, userState);
        }
        
        private void OnregistryOperationCompleted(object arg) {
            if ((this.registryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registryCompleted(this, new registryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://server.webservices.konrad.com/", ResponseNamespace="http://server.webservices.konrad.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string[] getDistricts([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0) {
            object[] results = this.Invoke("getDistricts", new object[] {
                        arg0});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getDistrictsAsync(string arg0) {
            this.getDistrictsAsync(arg0, null);
        }
        
        /// <remarks/>
        public void getDistrictsAsync(string arg0, object userState) {
            if ((this.getDistrictsOperationCompleted == null)) {
                this.getDistrictsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDistrictsOperationCompleted);
            }
            this.InvokeAsync("getDistricts", new object[] {
                        arg0}, this.getDistrictsOperationCompleted, userState);
        }
        
        private void OngetDistrictsOperationCompleted(object arg) {
            if ((this.getDistrictsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDistrictsCompleted(this, new getDistrictsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://server.webservices.konrad.com/", ResponseNamespace="http://server.webservices.konrad.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getServerName() {
            object[] results = this.Invoke("getServerName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getServerNameAsync() {
            this.getServerNameAsync(null);
        }
        
        /// <remarks/>
        public void getServerNameAsync(object userState) {
            if ((this.getServerNameOperationCompleted == null)) {
                this.getServerNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServerNameOperationCompleted);
            }
            this.InvokeAsync("getServerName", new object[0], this.getServerNameOperationCompleted, userState);
        }
        
        private void OngetServerNameOperationCompleted(object arg) {
            if ((this.getServerNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServerNameCompleted(this, new getServerNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://server.webservices.konrad.com/", ResponseNamespace="http://server.webservices.konrad.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getUnclaimedParcels() {
            this.Invoke("getUnclaimedParcels", new object[0]);
        }
        
        /// <remarks/>
        public void getUnclaimedParcelsAsync() {
            this.getUnclaimedParcelsAsync(null);
        }
        
        /// <remarks/>
        public void getUnclaimedParcelsAsync(object userState) {
            if ((this.getUnclaimedParcelsOperationCompleted == null)) {
                this.getUnclaimedParcelsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUnclaimedParcelsOperationCompleted);
            }
            this.InvokeAsync("getUnclaimedParcels", new object[0], this.getUnclaimedParcelsOperationCompleted, userState);
        }
        
        private void OngetUnclaimedParcelsOperationCompleted(object arg) {
            if ((this.getUnclaimedParcelsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUnclaimedParcelsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://server.webservices.konrad.com/", ResponseNamespace="http://server.webservices.konrad.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool checkParcelStatus([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2) {
            object[] results = this.Invoke("checkParcelStatus", new object[] {
                        arg0,
                        arg1,
                        arg2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void checkParcelStatusAsync(string arg0, int arg1, string arg2) {
            this.checkParcelStatusAsync(arg0, arg1, arg2, null);
        }
        
        /// <remarks/>
        public void checkParcelStatusAsync(string arg0, int arg1, string arg2, object userState) {
            if ((this.checkParcelStatusOperationCompleted == null)) {
                this.checkParcelStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckParcelStatusOperationCompleted);
            }
            this.InvokeAsync("checkParcelStatus", new object[] {
                        arg0,
                        arg1,
                        arg2}, this.checkParcelStatusOperationCompleted, userState);
        }
        
        private void OncheckParcelStatusOperationCompleted(object arg) {
            if ((this.checkParcelStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkParcelStatusCompleted(this, new checkParcelStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://server.webservices.konrad.com/", ResponseNamespace="http://server.webservices.konrad.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool checkLogin([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0) {
            object[] results = this.Invoke("checkLogin", new object[] {
                        arg0});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void checkLoginAsync(string arg0) {
            this.checkLoginAsync(arg0, null);
        }
        
        /// <remarks/>
        public void checkLoginAsync(string arg0, object userState) {
            if ((this.checkLoginOperationCompleted == null)) {
                this.checkLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckLoginOperationCompleted);
            }
            this.InvokeAsync("checkLogin", new object[] {
                        arg0}, this.checkLoginOperationCompleted, userState);
        }
        
        private void OncheckLoginOperationCompleted(object arg) {
            if ((this.checkLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkLoginCompleted(this, new checkLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://server.webservices.konrad.com/", ResponseNamespace="http://server.webservices.konrad.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void addEmployee() {
            this.Invoke("addEmployee", new object[0]);
        }
        
        /// <remarks/>
        public void addEmployeeAsync() {
            this.addEmployeeAsync(null);
        }
        
        /// <remarks/>
        public void addEmployeeAsync(object userState) {
            if ((this.addEmployeeOperationCompleted == null)) {
                this.addEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEmployeeOperationCompleted);
            }
            this.InvokeAsync("addEmployee", new object[0], this.addEmployeeOperationCompleted, userState);
        }
        
        private void OnaddEmployeeOperationCompleted(object arg) {
            if ((this.addEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addEmployeeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://server.webservices.konrad.com/", ResponseNamespace="http://server.webservices.konrad.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string[] trackOrder([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0) {
            object[] results = this.Invoke("trackOrder", new object[] {
                        arg0});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void trackOrderAsync(string arg0) {
            this.trackOrderAsync(arg0, null);
        }
        
        /// <remarks/>
        public void trackOrderAsync(string arg0, object userState) {
            if ((this.trackOrderOperationCompleted == null)) {
                this.trackOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OntrackOrderOperationCompleted);
            }
            this.InvokeAsync("trackOrder", new object[] {
                        arg0}, this.trackOrderOperationCompleted, userState);
        }
        
        private void OntrackOrderOperationCompleted(object arg) {
            if ((this.trackOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.trackOrderCompleted(this, new trackOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://server.webservices.konrad.com/", ResponseNamespace="http://server.webservices.konrad.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary", IsNullable=true)]
        public byte[] getWayBill([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0) {
            object[] results = this.Invoke("getWayBill", new object[] {
                        arg0});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getWayBillAsync(string arg0) {
            this.getWayBillAsync(arg0, null);
        }
        
        /// <remarks/>
        public void getWayBillAsync(string arg0, object userState) {
            if ((this.getWayBillOperationCompleted == null)) {
                this.getWayBillOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetWayBillOperationCompleted);
            }
            this.InvokeAsync("getWayBill", new object[] {
                        arg0}, this.getWayBillOperationCompleted, userState);
        }
        
        private void OngetWayBillOperationCompleted(object arg) {
            if ((this.getWayBillCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getWayBillCompleted(this, new getWayBillCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://server.webservices.konrad.com/", ResponseNamespace="http://server.webservices.konrad.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public client getClientByAPIpassword([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0) {
            object[] results = this.Invoke("getClientByAPIpassword", new object[] {
                        arg0});
            return ((client)(results[0]));
        }
        
        /// <remarks/>
        public void getClientByAPIpasswordAsync(string arg0) {
            this.getClientByAPIpasswordAsync(arg0, null);
        }
        
        /// <remarks/>
        public void getClientByAPIpasswordAsync(string arg0, object userState) {
            if ((this.getClientByAPIpasswordOperationCompleted == null)) {
                this.getClientByAPIpasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetClientByAPIpasswordOperationCompleted);
            }
            this.InvokeAsync("getClientByAPIpassword", new object[] {
                        arg0}, this.getClientByAPIpasswordOperationCompleted, userState);
        }
        
        private void OngetClientByAPIpasswordOperationCompleted(object arg) {
            if ((this.getClientByAPIpasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getClientByAPIpasswordCompleted(this, new getClientByAPIpasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://server.webservices.konrad.com/", ResponseNamespace="http://server.webservices.konrad.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string placeOrderByLoginAndPassword([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg3, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg4, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg5, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg6, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg7, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg8) {
            object[] results = this.Invoke("placeOrderByLoginAndPassword", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3,
                        arg4,
                        arg5,
                        arg6,
                        arg7,
                        arg8});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void placeOrderByLoginAndPasswordAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, string arg8) {
            this.placeOrderByLoginAndPasswordAsync(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, null);
        }
        
        /// <remarks/>
        public void placeOrderByLoginAndPasswordAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, string arg8, object userState) {
            if ((this.placeOrderByLoginAndPasswordOperationCompleted == null)) {
                this.placeOrderByLoginAndPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnplaceOrderByLoginAndPasswordOperationCompleted);
            }
            this.InvokeAsync("placeOrderByLoginAndPassword", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3,
                        arg4,
                        arg5,
                        arg6,
                        arg7,
                        arg8}, this.placeOrderByLoginAndPasswordOperationCompleted, userState);
        }
        
        private void OnplaceOrderByLoginAndPasswordOperationCompleted(object arg) {
            if ((this.placeOrderByLoginAndPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.placeOrderByLoginAndPasswordCompleted(this, new placeOrderByLoginAndPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://server.webservices.konrad.com/", ResponseNamespace="http://server.webservices.konrad.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string placeOrderByAPIpassword([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg2, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg3, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg4, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg5, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg6, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg7) {
            object[] results = this.Invoke("placeOrderByAPIpassword", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3,
                        arg4,
                        arg5,
                        arg6,
                        arg7});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void placeOrderByAPIpasswordAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7) {
            this.placeOrderByAPIpasswordAsync(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, null);
        }
        
        /// <remarks/>
        public void placeOrderByAPIpasswordAsync(string arg0, string arg1, string arg2, string arg3, string arg4, string arg5, string arg6, string arg7, object userState) {
            if ((this.placeOrderByAPIpasswordOperationCompleted == null)) {
                this.placeOrderByAPIpasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnplaceOrderByAPIpasswordOperationCompleted);
            }
            this.InvokeAsync("placeOrderByAPIpassword", new object[] {
                        arg0,
                        arg1,
                        arg2,
                        arg3,
                        arg4,
                        arg5,
                        arg6,
                        arg7}, this.placeOrderByAPIpasswordOperationCompleted, userState);
        }
        
        private void OnplaceOrderByAPIpasswordOperationCompleted(object arg) {
            if ((this.placeOrderByAPIpasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.placeOrderByAPIpasswordCompleted(this, new placeOrderByAPIpasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://server.webservices.konrad.com/", ResponseNamespace="http://server.webservices.konrad.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public client getClientByLoginAndPassword([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg1) {
            object[] results = this.Invoke("getClientByLoginAndPassword", new object[] {
                        arg0,
                        arg1});
            return ((client)(results[0]));
        }
        
        /// <remarks/>
        public void getClientByLoginAndPasswordAsync(string arg0, string arg1) {
            this.getClientByLoginAndPasswordAsync(arg0, arg1, null);
        }
        
        /// <remarks/>
        public void getClientByLoginAndPasswordAsync(string arg0, string arg1, object userState) {
            if ((this.getClientByLoginAndPasswordOperationCompleted == null)) {
                this.getClientByLoginAndPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetClientByLoginAndPasswordOperationCompleted);
            }
            this.InvokeAsync("getClientByLoginAndPassword", new object[] {
                        arg0,
                        arg1}, this.getClientByLoginAndPasswordOperationCompleted, userState);
        }
        
        private void OngetClientByLoginAndPasswordOperationCompleted(object arg) {
            if ((this.getClientByLoginAndPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getClientByLoginAndPasswordCompleted(this, new getClientByLoginAndPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://server.webservices.konrad.com/", ResponseNamespace="http://server.webservices.konrad.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string[] getCountries() {
            object[] results = this.Invoke("getCountries", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getCountriesAsync() {
            this.getCountriesAsync(null);
        }
        
        /// <remarks/>
        public void getCountriesAsync(object userState) {
            if ((this.getCountriesOperationCompleted == null)) {
                this.getCountriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCountriesOperationCompleted);
            }
            this.InvokeAsync("getCountries", new object[0], this.getCountriesOperationCompleted, userState);
        }
        
        private void OngetCountriesOperationCompleted(object arg) {
            if ((this.getCountriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCountriesCompleted(this, new getCountriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://server.webservices.konrad.com/")]
    public partial class client {
        
        private string aPIpasswordField;
        
        private string addressField;
        
        private string cityField;
        
        private string countryField;
        
        private string emailField;
        
        private long idField;
        
        private bool idFieldSpecified;
        
        private string loginField;
        
        private string nameField;
        
        private string passwordField;
        
        private string phoneNumberField;
        
        private string zipCodeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string APIpassword {
            get {
                return this.aPIpasswordField;
            }
            set {
                this.aPIpasswordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string city {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool idSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string login {
            get {
                return this.loginField;
            }
            set {
                this.loginField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string phoneNumber {
            get {
                return this.phoneNumberField;
            }
            set {
                this.phoneNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string zipCode {
            get {
                return this.zipCodeField;
            }
            set {
                this.zipCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void registryCompletedEventHandler(object sender, registryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class registryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal registryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getDistrictsCompletedEventHandler(object sender, getDistrictsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDistrictsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDistrictsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getServerNameCompletedEventHandler(object sender, getServerNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServerNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServerNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getUnclaimedParcelsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void checkParcelStatusCompletedEventHandler(object sender, checkParcelStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkParcelStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkParcelStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void checkLoginCompletedEventHandler(object sender, checkLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void addEmployeeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void trackOrderCompletedEventHandler(object sender, trackOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class trackOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal trackOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getWayBillCompletedEventHandler(object sender, getWayBillCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getWayBillCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getWayBillCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getClientByAPIpasswordCompletedEventHandler(object sender, getClientByAPIpasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getClientByAPIpasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getClientByAPIpasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void placeOrderByLoginAndPasswordCompletedEventHandler(object sender, placeOrderByLoginAndPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class placeOrderByLoginAndPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal placeOrderByLoginAndPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void placeOrderByAPIpasswordCompletedEventHandler(object sender, placeOrderByAPIpasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class placeOrderByAPIpasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal placeOrderByAPIpasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getClientByLoginAndPasswordCompletedEventHandler(object sender, getClientByLoginAndPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getClientByLoginAndPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getClientByLoginAndPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getCountriesCompletedEventHandler(object sender, getCountriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCountriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCountriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591